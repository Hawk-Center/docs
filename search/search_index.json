{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hawk Production Engineering Documentation","text":""},{"location":"#overview","title":"Overview","text":"<ul> <li>Architecture</li> <li>Pipeline Workflow</li> <li>Key Components</li> <li>Getting Started</li> </ul>"},{"location":"#model-state-generation","title":"Model State Generation","text":"<ul> <li>Feature Engineering Pipeline</li> <li>Feature Engineering Overview</li> <li>Technical Indicators</li> <li>Data Sources</li> <li>Custom Features</li> <li>Configuration</li> <li>YAML Structure</li> <li>Feature Definitions</li> <li>Runtime Modes (EOD/Intraday)</li> <li>Data Flow</li> <li>Input Data Requirements</li> <li>Output Format</li> <li>GCS Storage Structure</li> </ul>"},{"location":"#trading-models","title":"Trading Models","text":"<ul> <li>API Reference</li> <li>Available Models</li> <li>EMA Cross Strategies</li> <li>RSI Strategy</li> <li>Adding New Models</li> <li>Model Configuration</li> <li>YAML Configuration</li> <li>Model Parameters</li> <li>State Management</li> </ul>"},{"location":"#portfolio-simulation","title":"Portfolio Simulation","text":"<ul> <li>Backtesting Framework</li> <li>Data Requirements</li> <li>Performance Metrics</li> <li>Risk Metrics</li> <li>Portfolio Management</li> <li>Position Sizing</li> <li>Risk Management</li> <li>Rebalancing Logic</li> <li>Results Analysis</li> <li>Performance Reports</li> <li>Risk Analysis</li> <li>Visualization</li> </ul>"},{"location":"#model-aggregation","title":"Model Aggregation","text":"<ul> <li>Portfolio Optimization</li> <li>Modern Portfolio Theory Implementation</li> <li>MOSEK Integration</li> <li>Optimization Parameters</li> <li>Weight Allocation</li> <li>Model Weighting Strategies</li> <li>Risk Constraints</li> <li>Rebalancing Rules</li> </ul>"},{"location":"#developer-guide","title":"Developer Guide","text":"<ul> <li>Setup and Installation</li> <li>Environment Configuration</li> <li>Development Workflow</li> <li>Testing Framework</li> <li>Deployment Process</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Model State Generator API</li> <li>Trading Model Base Classes</li> <li>Portfolio Simulator API</li> <li>Model Aggregator API</li> <li>Common Utilities</li> </ul>"},{"location":"#operational-guide","title":"Operational Guide","text":"<ul> <li>Production Pipeline</li> <li>Daily Operations</li> <li>Monitoring</li> <li>Alerting</li> <li>Troubleshooting</li> <li>Common Issues</li> <li>Debug Procedures</li> <li>Logging System</li> <li>Performance Optimization</li> <li>Bottleneck Analysis</li> <li>Scaling Considerations</li> </ul>"},{"location":"#research-extensions","title":"Research Extensions","text":"<ul> <li>Adding New Features</li> <li>Implementing New Models</li> <li>Custom Optimization Strategies</li> <li>Backtesting Methodologies</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines &amp; Workflow","text":""},{"location":"CONTRIBUTING/#how-do-i-contribute","title":"How do I contribute?","text":"<p>The general rule of thumb is that any change you're making to a repository should be associated with a ticket in Linear. If not, create a ticket to do so. Exceptions to this rule include hotfixes and minor bug fixes.</p>"},{"location":"CONTRIBUTING/#steps-to-contribute","title":"Steps to contribute:","text":"<ol> <li>Clone the repository.</li> <li>Create a new branch. The branch name can either be your name or a name related to the ticket you are working on. Keep it short (&lt;30 characters).</li> <li>Immediately make an empty commit and create a pull request. This will allow the team to know that you are working on a ticket.</li> <li>The PR name should follow this convention: <code>[&lt;ticket-id&gt;] &lt;ticket-name&gt;</code> and be marked as draft.<ul> <li>The ticket ID will automatically link the PR to the ticket through the Linear integration.</li> </ul> </li> <li>Example: <code>[HAWK-45] Update repository README to conform with Linear workflow</code>.</li> <li>The first description should be the link to the Linear ticket. Refer to the screenshots below.</li> <li></li> <li></li> <li>Commit often and push/pull frequently. This will allow the team to see your progress. Furthermore, it will help you in case you need to revert back to a previous state.</li> <li>After you have received adequate review and feedback, squash your commits and merge your branch into the main branch.</li> </ol>"},{"location":"CONTRIBUTING/#style-guide","title":"Style Guide","text":""},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Comprehensive documentation is essential to ensure that future team members can efficiently debug and refactor our codebase. Clear and well-maintained documentation facilitates understanding, promotes consistency, and enhances overall project maintainability.</p> <p>Example:</p> <pre><code>\"\"\"\n@description: Summary of what the file is\n@author: [FIRST NAME] [LAST NAME]\n\n\"\"\"\n\ndef sample_function(var: str) -&gt; str:\n\n    \"\"\"Description of what the function does.\n\n    :param var: Description of the parameter.\n    :return: Description of the return value.\n    \"\"\"\n\n    print(var)\n    return var\n\n    # Inline comments to summarize more complex code\n</code></pre>"},{"location":"CONTRIBUTING/#styling","title":"Styling","text":"<p>Before pushing code run the following commands to ensure that the code is compliant with the typing standards:</p> <pre><code>mypy .\n</code></pre> <p>Notes:</p> <ol> <li>Type-Annotate Code: Add type annotations to function signatures and variables to make the code more self-explanatory and to help catch potential issues early. For example, def greet(name: str) -&gt; str:.</li> <li>PEP8-Compliant 80-Char Max per Line: Follow the PEP8 style guide and keep lines to a maximum of 80 characters. This improves readability and ensures consistency across the codebase.</li> </ol> <p>If you are using an LLM to write code for you, adding these instructions will usually get you code compliant with the above: <pre><code>use type-annotations, sphinx-style docstrings, and pep8 compliant max 80 chars per line.\n</code></pre></p>"},{"location":"api/model-state-generator/base/","title":"Model State Generator Base Classes","text":""},{"location":"api/model-state-generator/base/#featurebase","title":"FeatureBase","text":"<p>Base abstract class for all features in the system.</p> <pre><code>class FeatureBase(ABC):\n    \"\"\"\n    Abstract base class for all features.\n\n    :param name: Name of the feature\n    :param description: Description of what the feature represents\n    :param kwargs: Additional keyword arguments for feature configuration\n    \"\"\"\n\n    def __init__(self, name: str, description: str, **kwargs: Any) -&gt; None:\n        self.name = name\n        self.description = description\n</code></pre>"},{"location":"api/model-state-generator/base/#methods","title":"Methods","text":""},{"location":"api/model-state-generator/base/#get_name","title":"get_name()","text":"<pre><code>def get_name(self) -&gt; str:\n    \"\"\"\n    Returns the feature name.\n\n    :return: Name of the feature\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#get_description","title":"get_description()","text":"<pre><code>def get_description(self) -&gt; str:\n    \"\"\"\n    Returns the feature description.\n\n    :return: Description of the feature\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#databasefeaturebase","title":"DatabaseFeatureBase","text":"<p>Base class for features that are retrieved directly from the database.</p> <pre><code>class DatabaseFeatureBase(FeatureBase):\n    \"\"\"\n    Base class for features sourced from database.\n\n    :param name: Name of the database feature\n    :param description: Description of what the feature represents\n    :param kwargs: Additional configuration parameters\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#methods_1","title":"Methods","text":""},{"location":"api/model-state-generator/base/#get_data","title":"get_data()","text":"<pre><code>@abstractmethod\ndef get_data(self) -&gt; Any:\n    \"\"\"\n    Retrieves feature data from the database.\n\n    :return: Feature data in the appropriate format\n    :raises: NotImplementedError when not implemented by child class\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#computedfeaturebase","title":"ComputedFeatureBase","text":"<p>Base class for features that are computed from other features.</p> <pre><code>class ComputedFeatureBase(FeatureBase):\n    \"\"\"\n    Base class for computed features.\n\n    :param name: Name of the computed feature\n    :param description: Description of what the feature represents\n    :param kwargs: Additional computation parameters\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#methods_2","title":"Methods","text":""},{"location":"api/model-state-generator/base/#compute_feature","title":"compute_feature()","text":"<pre><code>@abstractmethod\ndef compute_feature(self, data: Any) -&gt; Any:\n    \"\"\"\n    Computes the feature value from input data.\n\n    :param data: Input data required for feature computation\n    :return: Computed feature values\n    :raises: NotImplementedError when not implemented by child class\n    \"\"\"\n</code></pre>"},{"location":"api/model-state-generator/base/#usage-example","title":"Usage Example","text":"<pre><code>from src.model_state_generator.features.feature_base import ComputedFeatureBase\n\nclass RSIFeature(ComputedFeatureBase):\n    def __init__(self, period: int = 14):\n        super().__init__(\n            name=f\"RSI_{period}\",\n            description=f\"{period}-period Relative Strength Index\"\n        )\n        self.period = period\n\n    def compute_feature(self, data: pd.DataFrame) -&gt; pd.Series:\n        return talib.RSI(data['close'], timeperiod=self.period)\n</code></pre>"},{"location":"api/trading-models/base/","title":"Trading Models Base Classes","text":""},{"location":"api/trading-models/base/#tradingmodelbase","title":"TradingModelBase","text":"<p>Abstract base class for all trading models in the system.</p> <pre><code>class TradingModelBase(ABC):\n    \"\"\"\n    Abstract base class for all trading models.\n\n    :param model_info: Trading model metadata\n    :param model_state: Pre-computed feature data for the model\n    :param runtime_mode: Execution mode (EOD/INTRADAY)\n    \"\"\"\n\n    def __init__(\n        self,\n        model_info: TradingModelInfo,\n        model_state: pd.DataFrame,\n        runtime_mode: RuntimeMode\n    ) -&gt; None:\n        self.model_info = model_info\n        self.model_state = model_state\n        self.runtime_mode = runtime_mode\n</code></pre>"},{"location":"api/trading-models/base/#core-methods","title":"Core Methods","text":""},{"location":"api/trading-models/base/#generate_insights","title":"generate_insights()","text":"<pre><code>@abstractmethod\ndef generate_insights(self) -&gt; ModelInsights:\n    \"\"\"\n    Generates trading insights from model state data.\n\n    :return: Collection of trading insights\n    :raises: NotImplementedError when not implemented by child class\n    \"\"\"\n</code></pre>"},{"location":"api/trading-models/base/#strategy-implementation-example","title":"Strategy Implementation Example","text":"<p>Here's how to implement a simple moving average crossover strategy:</p> <pre><code>class EMACrossStrategy(TradingModelBase):\n    \"\"\"\n    Moving average crossover trading strategy.\n\n    :param fast_period: Period for fast moving average\n    :param slow_period: Period for slow moving average\n    \"\"\"\n\n    def __init__(\n        self,\n        model_info: TradingModelInfo,\n        model_state: pd.DataFrame,\n        fast_period: int = 8,\n        slow_period: int = 32\n    ) -&gt; None:\n        super().__init__(model_info, model_state, RuntimeMode.EOD)\n        self.fast_period = fast_period\n        self.slow_period = slow_period\n\n    def generate_insights(self) -&gt; ModelInsights:\n        \"\"\"\n        Generates trading signals based on EMA crossovers.\n\n        :return: Collection of trading insights\n        \"\"\"\n        fast_ema = self.model_state[f'ema_{self.fast_period}']\n        slow_ema = self.model_state[f'ema_{self.slow_period}']\n\n        # Generate crossover signals\n        signal = np.where(\n            fast_ema &gt; slow_ema,\n            PositionType.LONG,\n            PositionType.SHORT\n        )\n\n        # Create insights\n        insights = {}\n        for ticker in self.model_state['ticker'].unique():\n            insights[ticker] = SecurityInsight(\n                ticker=ticker,\n                position_type=signal[-1],\n                weight=1.0\n            )\n\n        return ModelInsights(\n            model_info=self.model_info,\n            insights=insights,\n            insight_date=datetime.now()\n        )\n</code></pre>"},{"location":"api/trading-models/base/#configuration","title":"Configuration","text":"<p>Trading models are configured through YAML files:</p> <pre><code>trading_model_name: ema_cross_8_32\nmodel_state_name: ema_cross_features\nruntime_mode: EOD\nparameters:\n  fast_period: 8\n  slow_period: 32\n</code></pre>"},{"location":"api/trading-models/base/#usage-example","title":"Usage Example","text":"<pre><code># Load model state from GCS\nmodel_state = pd.read_parquet('gs://bucket/model_states/ema_cross_features.parquet')\n\n# Create model info\nmodel_info = TradingModelInfo(\n    trading_model_name=\"ema_cross_8_32\",\n    model_state_name=\"ema_cross_features\",\n    runtime_mode=RuntimeMode.EOD,\n    bucket_name=\"your-bucket\",\n    pod_name=\"your-pod\",\n    model_class=\"EMACrossStrategy\"\n)\n\n# Initialize and run model\nmodel = EMACrossStrategy(model_info, model_state)\ninsights = model.generate_insights()\n</code></pre> <p>For reference to types and enums, see:</p> <p>```markdown:docs/api/common/types.md startLine: 1 endLine: 97 <pre><code>```markdown:docs/api/common/enums.md\nstartLine: 1\nendLine: 56\n</code></pre></p>"},{"location":"overview/architecture/","title":"System Architecture","text":""},{"location":"overview/architecture/#overview","title":"Overview","text":"<p>The Hawk Production Engineering system consists of four main components that work together in a pipeline:</p> <pre><code>graph LR\n\n    A[Model State Generator] --&gt; B[Trading Models]\n    B --&gt; C[Portfolio Simulator]\n    C --&gt; D[Model Aggregator]\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#fbb,stroke:#333,stroke-width:2px\n    style D fill:#bfb,stroke:#333,stroke-width:2px</code></pre>"},{"location":"overview/architecture/#component-details","title":"Component Details","text":""},{"location":"overview/architecture/#1-model-state-generator","title":"1. Model State Generator","text":"<pre><code>graph TD\n    A[Raw Market Data from BigQuery] --&gt; B[Feature Engineering]\n    B --&gt; C[Technical Indicators TA-Lib]\n    B --&gt; D[Custom Features]\n    C --&gt; E[Model State]\n    D --&gt; E\n    E --&gt; F[Parquet to GCS Storage]</code></pre> <ul> <li>Ingests raw market data</li> <li>Computes technical indicators (EMA, RSI, etc.)</li> <li>Generates feature sets for each model</li> <li>Stores results in Google Cloud Storage</li> </ul>"},{"location":"overview/architecture/#2-trading-models","title":"2. Trading Models","text":"<pre><code>graph LR\n    A[Model States] --&gt; B[EMA Cross Models]\n    A --&gt; C[RSI Models]\n    B --&gt; D[Portfolio Insights]\n    C --&gt; D\n    D --&gt; E[Parquet to GCS Storage]</code></pre> <ul> <li>Consumes model states</li> <li>Implements trading strategies</li> <li>Generates position signals</li> <li>Supports multiple model types:</li> <li>EMA Cross Strategies</li> <li>RSI Strategy</li> <li>Others ?? (To be added, i.e kernel regression, hurst exponent, committment of traders, binary classifiers, reversal indicators, etc.)</li> </ul>"},{"location":"overview/architecture/#3-portfolio-simulator","title":"3. Portfolio Simulator","text":"<pre><code>graph LR\n    A[Model Insights] --&gt; B[hawk_backtester]\n    B --&gt; C[Timeseries of Historical Performance]\n    B --&gt; D[Performance Metrics]\n</code></pre>"},{"location":"overview/architecture/#4-model-aggregator","title":"4. Model Aggregator","text":"<pre><code>graph TD\n    A[Simulated Model Timeseries] --&gt; B[Portfolio Optimization Problem]\n    B --&gt; C[MOSEK Solver]\n    C --&gt; D[Model Weight Allocations]\n    D --&gt; E[Combined Portfolio Insights]</code></pre> <ul> <li>Implements portfolio optimization using MOSEK -- Finds optimal risk-adjusted portfolio</li> <li>Aggregates signals from multiple models using historical performance &amp; correlations</li> <li>Generates final portfolio insights as a linear combination of model insights</li> </ul>"},{"location":"overview/architecture/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram\n    participant BQ as BigQuery\n    participant MSG as Model State Generator\n    participant GCS as Google Cloud Storage\n    participant TM as Trading Models\n    participant PS as Portfolio Simulator\n    participant MA as Model Aggregator\n    BQ-&gt;&gt;MSG: Query Raw Dataset Features\n    MSG-&gt;&gt;GCS: Store Feature Sets\n    GCS-&gt;&gt;TM: Read Feature Sets\n    TM-&gt;&gt;GCS: Store Model Insights\n    GCS-&gt;&gt;PS: Read Insights\n    PS-&gt;&gt;GCS: Store Performance Timeseries\n    GCS-&gt;&gt;MA: Read Performance Timeseries\n    MA-&gt;&gt;GCS: Store Aggregated Insights</code></pre>"},{"location":"overview/architecture/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code>graph TD\nsubgraph Docker Containers\n    A[Model State Generator Container]\n    B[Trading Models Container]\n    C[Portfolio Simulator Container]\n    D[Model Aggregator Container]\n    A --&gt;|Triggers| B\n    B --&gt;|Triggers| C\n    C --&gt; |Triggers| D\n\n    end\nsubgraph Storage\n    E[Google Cloud Storage]\n    G[BigQuery Database]\n    end\nsubgraph Orchestration\n    F[Airflow DAGs]\n    end\n    F --&gt;|Triggers| A\n    A --&gt;|Writes| E\n    B --&gt;|Reads/Writes| E\n    C --&gt;|Reads/Writes| E\n    D --&gt;|Reads/Writes| E\n    A --&gt;|Reads| G</code></pre>"},{"location":"overview/architecture/#current-services","title":"Current Services","text":"Service Purpose Key Technologies Model State Generator Feature engineering and state preparation Python, TA-Lib Trading Models Strategy implementation and signal generation Python Portfolio Simulator Performance analysis and backtesting Python, hawk-backtester Model Aggregator Portfolio optimization and weight allocation Python, MOSEK"},{"location":"overview/components/","title":"Key Components","text":""},{"location":"overview/components/#1-model-state-generator","title":"1. Model State Generator","text":"<p>The Model State Generator is responsible for creating and managing model states by:</p> <ul> <li>Processing raw market data from BigQuery</li> <li>Computing technical indicators using TA-Lib</li> <li>Generating feature sets for trading models</li> <li>Storing results in Google Cloud Storage (GCS)</li> </ul>"},{"location":"overview/components/#key-features","title":"Key Features","text":"<ul> <li>Parallel processing of multiple model configurations</li> <li>Support for custom technical indicators</li> <li>Configurable via YAML files</li> <li>Automated data validation and error handling</li> </ul>"},{"location":"overview/components/#2-trading-models","title":"2. Trading Models","text":"<p>Trading models consume model states to generate trading signals. Current implementations include:</p> <ul> <li>EMA Cross Strategies (8/32, 16/64, 32/128, 64/256)</li> <li>RSI Strategy (14-period)</li> </ul>"},{"location":"overview/components/#features","title":"Features","text":"<ul> <li>Version-controlled model implementations</li> <li>Configurable parameters via YAML</li> <li>Real-time and batch processing capabilities</li> <li>Standardized output format for portfolio simulation</li> </ul>"},{"location":"overview/components/#3-portfolio-simulator","title":"3. Portfolio Simulator","text":"<p>The Portfolio Simulator evaluates trading model performance by:</p> <ul> <li>Backtesting model signals</li> <li>Computing performance metrics</li> <li>Analyzing risk characteristics</li> <li>Generating performance reports</li> </ul>"},{"location":"overview/components/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Historical performance analysis</li> <li>Risk metrics calculation</li> <li>Transaction cost modeling</li> <li>Performance attribution</li> </ul>"},{"location":"overview/components/#4-model-aggregator","title":"4. Model Aggregator","text":"<p>The Model Aggregator optimizes portfolio allocation by:</p> <ul> <li>Combining signals from multiple models</li> <li>Optimizing weights using MOSEK</li> <li>Managing risk constraints</li> <li>Generating final portfolio insights</li> </ul>"},{"location":"overview/components/#features_1","title":"Features","text":"<ul> <li>Modern Portfolio Theory implementation</li> <li>Risk-adjusted optimization</li> <li>Dynamic weight rebalancing</li> <li>Multi-model signal aggregation</li> </ul>"},{"location":"overview/components/#5-infrastructure-components","title":"5. Infrastructure Components","text":""},{"location":"overview/components/#docker-containers","title":"Docker Containers","text":"<ul> <li>Isolated execution environments for each component</li> <li>Consistent deployment across environments</li> <li>Simplified dependency management</li> <li>Scalable architecture</li> </ul>"},{"location":"overview/components/#airflow-integration","title":"Airflow Integration","text":"<ul> <li>Automated pipeline scheduling</li> <li>Dependency management between tasks</li> <li>Error handling and retries</li> <li>Pipeline monitoring and logging</li> </ul>"},{"location":"overview/components/#storage","title":"Storage","text":"<ul> <li>Google Cloud Storage for model states and insights</li> <li>BigQuery for raw market data</li> <li>Local storage for temporary files</li> <li>Efficient data format (Parquet/JSON)</li> </ul>"},{"location":"overview/getting-started/","title":"Getting Started","text":""},{"location":"overview/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.10 or higher</li> <li>Docker and Docker Compose</li> <li>Poetry (Python dependency management)</li> <li>Git</li> </ul>"},{"location":"overview/getting-started/#initial-setup","title":"Initial Setup","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/Hawk-Center/production-engineering.git\ncd production-engineering\n</code></pre> <ol> <li>Install dependencies using Poetry:</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li> <p>Set up Google Cloud credentials:</p> </li> <li> <p>Download your service account JSON file</p> </li> <li>Rename it to <code>service_account.json</code></li> <li>Place it in the project root directory</li> </ol>"},{"location":"overview/getting-started/#configuration","title":"Configuration","text":""},{"location":"overview/getting-started/#environment-setup","title":"Environment Setup","text":"<ol> <li>Create a local environment file:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <pre><code>GOOGLE_APPLICATION_CREDENTIALS=/app/service_account.json\nMOSEK_LICENSE_PATH=/opt/mosek/mosek.lic # If using MOSEK optimizer\n</code></pre>"},{"location":"overview/getting-started/#model-configuration","title":"Model Configuration","text":"<p>Models are configured via YAML files located in <code>src/model_state_generator/configs/</code>. Each model requires:</p> <ul> <li>Feature definitions</li> <li>Data source specifications</li> <li>Model parameters</li> </ul> <p>Example configuration:</p> <pre><code>model_state_name: example_model\npod_name: hawk_global_futures\nuniverse_id: hawk_global_futures_universe\nbucket_name: your-gcs-bucket\ninterval: 1d\nstart_date: \"2010-01-01\"\n</code></pre>"},{"location":"overview/getting-started/#running-the-pipeline","title":"Running the Pipeline","text":""},{"location":"overview/getting-started/#1-build-docker-images","title":"1. Build Docker Images","text":"<p>Build all required containers:</p> <pre><code>docker-compose build\n</code></pre>"},{"location":"overview/getting-started/#2-generate-model-states","title":"2. Generate Model States","text":"<p>Run the model state generator:</p> <pre><code>docker-compose up trading_models\n</code></pre>"},{"location":"overview/getting-started/#3-execute-trading-models","title":"3. Execute Trading Models","text":"<p>Run the trading models:</p> <pre><code>docker-compose up trading_models\n</code></pre>"},{"location":"overview/getting-started/#4-run-portfolio-simulation","title":"4. Run Portfolio Simulation","text":"<p>Execute the portfolio simulator:</p> <pre><code>docker-compose up simulator\n</code></pre>"},{"location":"overview/getting-started/#5-aggregate-results","title":"5. Aggregate Results","text":"<p>Run the model aggregator:</p> <pre><code>docker-compose up aggregator\n</code></pre>"},{"location":"overview/getting-started/#architecture-specific-setup","title":"Architecture-Specific Setup","text":""},{"location":"overview/getting-started/#apple-silicon-m1m2","title":"Apple Silicon (M1/M2)","text":"<p>If running on Apple Silicon, modify the TA-Lib configuration in <code>docker/model_state_generator/Dockerfile</code>:</p> <pre><code>./configure --prefix=/usr --build=aarch64-unknown-linux-gnu &amp;&amp; \\\n</code></pre>"},{"location":"overview/getting-started/#linux-systems","title":"Linux Systems","text":"<p>Standard configuration should work out of the box:</p>"},{"location":"overview/getting-started/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a new branch for your changes:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Make an empty commit and create a pull request:</li> </ol> <pre><code>git commit --allow-empty -m \"[HAWK-XX] Your feature description\"\ngit push -u origin feature/your-feature-name\n</code></pre> <ol> <li>Follow the development guidelines in CONTIBUTING.md</li> </ol>"},{"location":"overview/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"overview/getting-started/#common-issues","title":"Common Issues","text":"<ol> <li>Docker permission errors:</li> </ol> <pre><code>sudo docker-compose up\n</code></pre> <ol> <li>TA-Lib installation issues:</li> </ol> <pre><code>docker-compose build --no-cache model_state_generator\n</code></pre> <ol> <li>Missing dependencies:</li> </ol> <pre><code>poetry install --no-cache\n</code></pre>"},{"location":"overview/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Check the logs: <code>docker-compose logs -f [service_name]</code></li> <li>Review documentation in the <code>docs/</code> directory</li> <li>Submit issues through the project's issue tracker</li> </ul>"},{"location":"overview/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Architecture Overview</li> <li>Explore Available Models</li> <li>Learn about Portfolio Simulation</li> </ul>"}]}